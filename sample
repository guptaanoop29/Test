using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
   static void Main()
   {
       List<(string fromApp, string toApp)> appConnections = new List<(string, string)>
       {
          ("App1", "App2"),
           ("App2", "App3"),
           ("App3", "App4"),
           ("App4", "App5"),
           ("App5", "App6"),
           ("App6", "App7"),
           ("App7", "App8"),
           ("App8", "App9"),
           ("App9", "App10"),
           ("App10", "App1"),
           ("App11", "App12"),
           ("App12", "App13"),
           ("App13", "App14"),
           ("App14", "App15"),
           ("App15", "App16"),
           ("App16", "App17"),
           ("App17", "App18"),
           ("App18", "App19"),
           ("App19", "App20"),
           ("App20", "App1"),
           ("App21", "App22"),
           ("App22", "App23"),
           ("App23", "App24"),
           ("App24", "App25"),
           ("App25", "App26"),
           ("App26", "App27"),
           ("App27", "App28"),
           ("App28", "App29"),
           ("App29", "App30"),
           ("App30", "App21"),
           ("App31", "App32"),
           ("App32", "App33"),
           ("App33", "App34"),
           ("App34", "App35"),
           ("App35", "App36"),
           ("App36", "App37"),
           ("App37", "App38"),
           ("App38", "App39"),
           ("App39", "App40"),
           ("App40", "App31"),
           ("App41", "App42"),
           ("App42", "App43"),
           ("App43", "App44"),
           ("App44", "App45"),
           ("App45", "App46"),
           ("App46", "App47"),
           ("App47", "App48"),
           ("App48", "App49"),
           ("App49", "App50"),
           ("App50", "App41")
       };

       Dictionary<string, string> appServerMapping = new Dictionary<string, string>
       {
           {"App1", "Server1"},
           {"App50", "Server1"},
       };

       var appGroups = GetDependentAppGroups(appConnections, appServerMapping);

       for (int i = 0; i < appGroups.Count; i++)
       {
           Console.WriteLine($"Group {i + 1}:");
           foreach (var app in appGroups[i])
           {
               Console.WriteLine(app);
           }
           Console.WriteLine();
       }
   }

   static List<List<string>> GetDependentAppGroups(List<(string fromApp, string toApp)> appConnections, Dictionary<string, string> appServerMapping)
   {
       var appGraph = new Dictionary<string, List<string>>();

       foreach (var (fromApp, toApp) in appConnections)
       {
           if (!appGraph.ContainsKey(fromApp))
           {
               appGraph[fromApp] = new List<string>();
           }
           appGraph[fromApp].Add(toApp);

           if (!appGraph.ContainsKey(toApp))
           {
               appGraph[toApp] = new List<string>();
           }
       }

       var visited = new HashSet<string>();
       var appGroups = new List<List<string>>();

       foreach (var app in appGraph.Keys)
       {
           if (!visited.Contains(app))
           {
               var group = new List<string>();
               TraverseDependencies(appGraph, app, visited, group);

               // Include apps on the same server and linked apps
               var serverApps = appServerMapping.Where(kv => kv.Value == appServerMapping[app]).Select(kv => kv.Key);
               var linkedApps = appConnections.Where(c => c.fromApp == app || c.toApp == app).SelectMany(c => new[] { c.fromApp, c.toApp });
               group.AddRange(serverApps.Union(linkedApps));

               appGroups.Add(group);
           }
       }

       return appGroups;
   }

   static void TraverseDependencies(Dictionary<string, List<string>> appGraph, string app, HashSet<string> visited, List<string> group)
   {
       visited.Add(app);
       group.Add(app);

       foreach (var dependentApp in appGraph[app])
       {
           if (!visited.Contains(dependentApp))
           {
               TraverseDependencies(appGraph, dependentApp, visited, group);
           }
       }
   }
}
